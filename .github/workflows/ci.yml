name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  REDIS_VERSION: '7.0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        include:
          - python-version: '3.11'
            test-type: 'comprehensive'
          - python-version: '3.11'
            test-type: 'unit'

    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check src/ tests/

    - name: Import sorting check with isort
      run: |
        isort --check-only src/ tests/

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run unit tests
      if: matrix.test-type == 'unit' || matrix.python-version != '3.11'
      env:
        REDIS_URL: redis://localhost:6379/0
        FRAPPE_URL: http://test-frappe.com
        FRAPPE_API_KEY: test_key
        FRAPPE_API_SECRET: test_secret
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_ANON_KEY: test_anon_key
        SUPABASE_SERVICE_ROLE_KEY: test_service_key
        WEBHOOK_SECRET: test_webhook_secret
        FRAPPE_WEBHOOK_TOKEN: test_token
        LOG_LEVEL: INFO
      run: |
        pytest tests/test_sync_components_unit.py tests/test_field_mapping.py tests/test_webhook_handlers.py --cov=src --cov-report=xml --cov-report=html --junitxml=pytest-report.xml -v

    - name: Run comprehensive tests
      if: matrix.test-type == 'comprehensive' || matrix.python-version == '3.11'
      env:
        REDIS_URL: redis://localhost:6379/0
        FRAPPE_URL: ${{ secrets.FRAPPE_URL || 'http://test-frappe.com' }}
        FRAPPE_API_KEY: ${{ secrets.FRAPPE_API_KEY || 'test_key' }}
        FRAPPE_API_SECRET: ${{ secrets.FRAPPE_API_SECRET || 'test_secret' }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test_anon_key' }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test_service_key' }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET || 'test_webhook_secret' }}
        FRAPPE_WEBHOOK_TOKEN: ${{ secrets.FRAPPE_WEBHOOK_TOKEN || 'test_token' }}
        LOG_LEVEL: INFO
      run: |
        pytest tests/test_comprehensive_sync_issues.py --cov=src --cov-report=xml --cov-report=html --junitxml=pytest-report.xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type || 'standard' }}
        path: |
          pytest-report.xml
          htmlcov/
          bandit-report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: teachafy/frappe-supabase-sync
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add your deployment commands here
